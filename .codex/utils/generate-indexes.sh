#!/usr/bin/env bash
set -euo pipefail

# generate-indexes.sh
# Generates index files and profile configs for the CEO Orchestration System
# Usage: .codex/utils/generate-indexes.sh

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CODEX_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BACKUP_DIR="$CODEX_ROOT/.backup"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}  CEO Orchestration System - Index Generator${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Function to backup existing file
backup_if_exists() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_name="$(basename "$file").${timestamp}"
        cp "$file" "$BACKUP_DIR/$backup_name"
        echo -e "${YELLOW}  ↳ Backed up to .backup/$backup_name${NC}"
    fi
}

# Function to extract agent metadata from .md files
extract_agent_metadata() {
    local file="$1"
    local id=$(basename "$file" .md)

    # Try to extract from YAML block
    local yaml_block=$(sed -n '/```yaml/,/```/p' "$file" | grep -v '```')

    local name=$(echo "$yaml_block" | grep -E '^\s*name:' | head -1 | sed 's/.*name:\s*//' | tr -d '"' | xargs)
    local agent_id=$(echo "$yaml_block" | grep -E '^\s*id:' | head -1 | sed 's/.*id:\s*//' | tr -d '"' | xargs)
    local title=$(echo "$yaml_block" | grep -E '^\s*title:' | head -1 | sed 's/.*title:\s*//' | tr -d '"' | xargs)
    local when_to_use=$(echo "$yaml_block" | grep -E '^\s*whenToUse:' | head -1 | sed 's/.*whenToUse:\s*//' | tr -d '"')

    # Use extracted id if available, otherwise filename
    [[ -n "$agent_id" ]] && id="$agent_id"
    [[ -z "$name" ]] && name=$(echo "$id" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
    [[ -z "$title" ]] && title="$name"
    [[ -z "$when_to_use" ]] && when_to_use="N/A"

    echo "$id|$name|$title|$when_to_use"
}

# Function to extract task metadata
extract_task_metadata() {
    local file="$1"
    local id=$(basename "$file" | sed 's/\.[^.]*$//')
    local ext="${file##*.}"

    local name=""
    local description=""

    if [[ "$ext" == "md" ]]; then
        # Extract first H1 and first paragraph
        name=$(grep -m 1 "^# " "$file" | sed 's/^# //' || echo "")
        description=$(sed -n '/^# /,/^$/p' "$file" | sed '1d;/^$/d' | head -1 || echo "")
    elif [[ "$ext" == "yaml" || "$ext" == "yml" ]]; then
        name=$(grep -E '^\s*name:' "$file" | head -1 | sed 's/.*name:\s*//' | tr -d '"' || echo "")
        description=$(grep -E '^\s*description:' "$file" | head -1 | sed 's/.*description:\s*//' | tr -d '"' || echo "")
    fi

    [[ -z "$name" ]] && name=$(echo "$id" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
    [[ -z "$description" ]] && description="N/A"

    echo "$id|$name|$description|$ext"
}

# ============================================================================
# Generate agents.index.yaml
# ============================================================================
echo -e "${GREEN}📝 Generating agents.index.yaml...${NC}"

AGENTS_INDEX="$CODEX_ROOT/agents.index.yaml"
backup_if_exists "$AGENTS_INDEX"

cat > "$AGENTS_INDEX" <<EOF
# Auto-generated by generate-indexes.sh
# DO NOT EDIT MANUALLY - Run .codex/utils/generate-indexes.sh to regenerate
version: 1
agents:
EOF

agent_count=0
for agent_file in "$CODEX_ROOT/agents"/*.md; do
    [[ -f "$agent_file" ]] || continue

    metadata=$(extract_agent_metadata "$agent_file")
    IFS='|' read -r id name title when_to_use <<< "$metadata"
    rel_path="agents/$(basename "$agent_file")"

    cat >> "$AGENTS_INDEX" <<EOF
  - id: $id
    name: "$name"
    title: "$title"
    description: "$when_to_use"
    model: gpt-5-codex
    path: "$rel_path"
EOF

    ((agent_count++))
done

echo -e "${GREEN}  ✓ Generated with $agent_count agents${NC}"

# ============================================================================
# Generate tasks.index.yaml
# ============================================================================
echo -e "${GREEN}📝 Generating tasks.index.yaml...${NC}"

TASKS_INDEX="$CODEX_ROOT/tasks.index.yaml"
backup_if_exists "$TASKS_INDEX"

cat > "$TASKS_INDEX" <<EOF
# Auto-generated by generate-indexes.sh
# DO NOT EDIT MANUALLY - Run .codex/utils/generate-indexes.sh to regenerate
version: 1
tasks:
EOF

task_count=0
for task_file in "$CODEX_ROOT/tasks"/*.{md,yaml,yml}; do
    [[ -f "$task_file" ]] || continue

    metadata=$(extract_task_metadata "$task_file")
    IFS='|' read -r id name description ext <<< "$metadata"
    rel_path="tasks/$(basename "$task_file")"

    [[ "$ext" == "md" ]] && type="task-md" || type="task-yaml"

    cat >> "$TASKS_INDEX" <<EOF
  - id: $id
    name: "$name"
    description: "$description"
    type: $type
    path: "$rel_path"
EOF

    ((task_count++))
done

echo -e "${GREEN}  ✓ Generated with $task_count tasks${NC}"

# ============================================================================
# Generate checklists.index.yaml
# ============================================================================
echo -e "${GREEN}📝 Generating checklists.index.yaml...${NC}"

CHECKLISTS_INDEX="$CODEX_ROOT/checklists.index.yaml"
backup_if_exists "$CHECKLISTS_INDEX"

cat > "$CHECKLISTS_INDEX" <<EOF
# Auto-generated by generate-indexes.sh
# DO NOT EDIT MANUALLY - Run .codex/utils/generate-indexes.sh to regenerate
version: 1
checklists:
EOF

checklist_count=0
for checklist_file in "$CODEX_ROOT/checklists"/*.{md,yaml,yml}; do
    [[ -f "$checklist_file" ]] || continue

    metadata=$(extract_task_metadata "$checklist_file")
    IFS='|' read -r id name description ext <<< "$metadata"
    rel_path="checklists/$(basename "$checklist_file")"

    [[ "$ext" == "md" ]] && type="checklist-md" || type="checklist-yaml"

    cat >> "$CHECKLISTS_INDEX" <<EOF
  - id: $id
    name: "$name"
    description: "$description"
    type: $type
    path: "$rel_path"
EOF

    ((checklist_count++))
done

echo -e "${GREEN}  ✓ Generated with $checklist_count checklists${NC}"

# ============================================================================
# Generate templates.index.yaml
# ============================================================================
echo -e "${GREEN}📝 Generating templates.index.yaml...${NC}"

TEMPLATES_INDEX="$CODEX_ROOT/templates.index.yaml"
backup_if_exists "$TEMPLATES_INDEX"

cat > "$TEMPLATES_INDEX" <<EOF
# Auto-generated by generate-indexes.sh
# DO NOT EDIT MANUALLY - Run .codex/utils/generate-indexes.sh to regenerate
version: 1
templates:
EOF

template_count=0
for template_file in "$CODEX_ROOT/templates"/*.yaml; do
    [[ -f "$template_file" ]] || continue

    id=$(basename "$template_file" .yaml)
    name=$(echo "$id" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
    rel_path="templates/$(basename "$template_file")"

    cat >> "$TEMPLATES_INDEX" <<EOF
  - id: $id
    name: "$name"
    path: "$rel_path"
EOF

    ((template_count++))
done

echo -e "${GREEN}  ✓ Generated with $template_count templates${NC}"

# ============================================================================
# Generate data.index.yaml
# ============================================================================
echo -e "${GREEN}📝 Generating data.index.yaml...${NC}"

DATA_INDEX="$CODEX_ROOT/data.index.yaml"
backup_if_exists "$DATA_INDEX"

cat > "$DATA_INDEX" <<EOF
# Auto-generated by generate-indexes.sh
# DO NOT EDIT MANUALLY - Run .codex/utils/generate-indexes.sh to regenerate
version: 1
data:
EOF

data_count=0
while IFS= read -r -d '' data_file; do
    rel_path="${data_file#$CODEX_ROOT/}"
    id=$(basename "$data_file" | sed 's/\.[^.]*$//')
    name=$(echo "$id" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')
    ext="${data_file##*.}"

    cat >> "$DATA_INDEX" <<EOF
  - id: $id
    name: "$name"
    type: $ext
    path: "$rel_path"
EOF

    ((data_count++))
done < <(find "$CODEX_ROOT/data" -type f -print0 2>/dev/null)

echo -e "${GREEN}  ✓ Generated with $data_count data files${NC}"

# ============================================================================
# Generate profiles.toml (for user's ~/.codex/config.toml)
# ============================================================================
echo ""
echo -e "${GREEN}📝 Generating profiles.toml...${NC}"

PROFILES_FILE="$CODEX_ROOT/profiles.toml"

cat > "$PROFILES_FILE" <<'EOF'
# ============================================================================
# CEO Orchestration System - Agent Profiles
# ============================================================================
# Add these profiles to your ~/.codex/config.toml to enable agent switching
#
# Usage:
#   codex --profile ceo        # Start with CEO orchestrator
#   codex --profile developer  # Start with Developer agent
#   codex --profile pm         # Start with Product Manager
#   etc.
#
# Copy-paste this entire block into your ~/.codex/config.toml file
# ============================================================================

EOF

# Generate profile for each agent
for agent_file in "$CODEX_ROOT/agents"/*.md; do
    [[ -f "$agent_file" ]] || continue

    metadata=$(extract_agent_metadata "$agent_file")
    IFS='|' read -r id name title when_to_use <<< "$metadata"

    # Determine sandbox mode based on agent type
    if [[ "$id" == "developer" || "$id" == "qa" ]]; then
        sandbox="workspace-write"
    else
        sandbox="read-only"
    fi

    cat >> "$PROFILES_FILE" <<EOF
[profiles.$id]
model = "gpt-5-codex"
approval_policy = "on-request"
sandbox_mode = "$sandbox"
# Agent: $name - $title

EOF
done

echo -e "${GREEN}  ✓ Generated profiles for all agents${NC}"
echo -e "${YELLOW}  → Copy .codex/profiles.toml to your ~/.codex/config.toml${NC}"

# ============================================================================
# Generate SETUP.md for users
# ============================================================================
echo ""
echo -e "${GREEN}📝 Generating SETUP.md...${NC}"

SETUP_FILE="$CODEX_ROOT/SETUP.md"

cat > "$SETUP_FILE" <<'EOF'
# CEO Orchestration System - Setup Guide

## Quick Start

### 1. Install Codex CLI

```bash
npm install -g codex-cli
```

### 2. Add Agent Profiles

Copy the contents of `.codex/profiles.toml` into your `~/.codex/config.toml`:

```bash
cat .codex/profiles.toml >> ~/.codex/config.toml
```

Or manually copy-paste the profiles section from `.codex/profiles.toml` into your config.

### 3. Start Using Agents

```bash
# Start with the CEO orchestrator
codex --profile ceo

# Or start directly with a specialist agent
codex --profile developer
codex --profile pm
codex --profile qa
```

## Agent Profiles

This system includes the following agent profiles:

- **ceo**: Executive orchestrator that routes work to specialists
- **developer**: Senior developer for implementation, debugging, and architecture
- **pm**: Product manager for strategy, specs, and task creation
- **qa**: QA specialist for testing and quality assurance
- **analytics**: Data analyst for metrics and reporting
- **marketer**: Marketing strategist for growth and campaigns
- **ux-expert**: UX/UI designer for interface design
- **prepper**: System optimizer for agent configuration

## How It Works

### Manual Agent Switching (Simple)

1. Start with CEO:
   ```bash
   codex --profile ceo
   ```

2. CEO analyzes your request and recommends an agent:
   ```
   You: "I need to implement a login feature"
   CEO: "This requires the developer agent. Exit and run: codex --profile developer"
   ```

3. Switch to the recommended agent:
   ```bash
   codex --profile developer
   ```

### Direct Agent Access

If you know which agent you need, skip the CEO and go directly:

```bash
codex --profile developer "Implement user authentication"
```

## Advanced: MCP Sub-Agents (Optional)

For automatic orchestration where the CEO can invoke agents directly, see:
- `.codex/docs/MCP_SETUP.md` (coming soon)

This requires installing an MCP server and is optional for power users.

## Regenerating Indexes

If you add new agents, tasks, or checklists, regenerate the indexes:

```bash
.codex/utils/generate-indexes.sh
```

This updates:
- `agents.index.yaml`
- `tasks.index.yaml`
- `checklists.index.yaml`
- `templates.index.yaml`
- `data.index.yaml`
- `profiles.toml`

## Project Structure

```
.codex/
├── agents/           # Agent definitions
├── tasks/            # Task templates
├── checklists/       # Quality checklists
├── templates/        # Document templates
├── data/             # Shared knowledge
├── utils/            # Utility scripts
├── profiles.toml     # Generated profile configs
├── *.index.yaml      # Generated indexes
└── SETUP.md          # This file
```

## Need Help?

- Check agent documentation: `.codex/agents/*.md`
- View available tasks: `.codex/tasks.index.yaml`
- See README.md for system overview
EOF

echo -e "${GREEN}  ✓ Generated SETUP.md${NC}"

# ============================================================================
# Summary
# ============================================================================
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✓ Index generation complete!${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo "Generated files:"
echo "  • agents.index.yaml ($agent_count agents)"
echo "  • tasks.index.yaml ($task_count tasks)"
echo "  • checklists.index.yaml ($checklist_count checklists)"
echo "  • templates.index.yaml ($template_count templates)"
echo "  • data.index.yaml ($data_count files)"
echo "  • profiles.toml (copy to ~/.codex/config.toml)"
echo "  • SETUP.md (user setup guide)"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "  1. Review generated files"
echo "  2. Copy profiles.toml to ~/.codex/config.toml"
echo "  3. Share SETUP.md with users"
echo ""
