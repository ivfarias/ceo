name: openai_agents_sdk_compliance
version: 1.0

rules:
  - id: A1
    name: Primitives Only
    severity: HIGH
    check: "Orchestration uses only run()/Runner.run() and handoff(); no extra verbs."
    verify:
      - grep: "run\(|Runner\.run\(|handoff\("
      - negative_grep: "(routeAgent|customHandoff|dispatchAgent|pipeTo|sendToAgent)"
      - review: "agent orchestrators / workflow code"
    fix: "Replace custom orchestration with run()/handoff(). Remove unsupported verbs."
  - id: A2
    name: Tool Categories Valid
    severity: HIGH
    check: "Every tool is one of: Function | Hosted | Agent-as-Tool | MCP."
    verify:
      - review: "tool registration and types"
      - schema: "ensure category enum ∈ {function, hosted, agent, mcp}"
    fix: "Recast tools to supported categories; delete or adapt outliers."
  - id: A3
    name: No Custom Routing
    severity: HIGH
    check: "No bespoke agent-to-agent communication beyond SDK patterns."
    verify:
      - negative_grep: "(axios|fetch).*\bagent\b.*(route|dispatch|post)"
      - review: "middleware, event bus, and agent hubs"
    fix: "Use handoff() or Agent-as-Tool instead of custom hops."
  - id: A4
    name: Tool Input Schema (Zod)
    severity: HIGH
    check: "All tools define parameters via tool({ parameters: z.object({...}) })."
    verify:
      - grep: "tool\s*\(\s*\{[\s\S]*parameters:\s*z\.object"
      - negative_grep: "parameters:\s*\{[^z\.object]"
    fix: "Wrap inputs in Zod schemas; reject unvalidated payloads."
  - id: A5
    name: Structured Outputs (Zod)
    severity: MEDIUM
    check: "Agents with non-text outputs declare outputType: z.object({...})."
    verify:
      - grep: "outputType:\s*z\.object"
      - review: "agents returning JSON or typed objects"
    fix: "Add outputType schema and enforce parse/validation."
  - id: A6
    name: Single RunContext<T>
    severity: HIGH
    check: "One canonical RunContext<T> shared across agents/tools/guardrails."
    verify:
      - grep: "RunContext<"
      - review: "context creation and plumbing"
    fix: "Standardize on a single context module; thread it everywhere."
  - id: A7
    name: History Threading
    severity: MEDIUM
    check: "Conversation history flows via result.history → next run()."
    verify:
      - grep: "result\.history"
      - grep: "run\(.*history"
    fix: "Pass prior result.history into the subsequent run()."
  - id: A8
    name: Model Settings Casing
    severity: MEDIUM
    check: "Uses modelSettings.toolChoice (camelCase), not tool_choice."
    verify:
      - grep: "modelSettings:\s*\{[\s\S]*toolChoice"
      - negative_grep: "tool_choice"
    fix: "Rename to modelSettings.toolChoice and remove snake_case."
  - id: A9
    name: Tracing Enabled/Declared
    severity: MEDIUM
    check: "Tracing wired to Langfuse (or explicitly disabled with rationale)."
    verify:
      - grep: "(Langfuse|tracing|traceExporter)"
      - review: "bootstrapping / env flags"
    fix: "Configure tracing exporter; or add comment/flag documenting why disabled."
  - id: A10
    name: Vision & Whisper Usage
    severity: MEDIUM
    check: "Use OpenAI Vision for images/PDFs and Whisper for audio; custom file analysis only for text formats (csv, ts(x), json, txt, md, log)."
    verify:
      - grep: "(vision|whisper|audio|pdf|image)"
      - review: "file routers; ensure non-text goes to the right API"
    fix: "Route non-text to Vision/Whisper; restrict custom analyzers to text."
  - id: A11
    name: Deterministic IDs via Context
    severity: HIGH
    check: "IDs (userId, wid, aid, etc.) come from RunContext; never inferred or generated by agents."
    verify:
      - negative_grep: "(userId|wid|aid)\s*=\s*(uuid|nanoid|random|hash)"
      - review: "ID propagation: handlers → agent → tools"
    fix: "Source identifiers strictly from context; remove generation/inference."

lean_guards:
  do_not_expand_scope: true
  prefer_small_safe_fixes: true
  refactor_only_if_required_by_rule: true
  skip_large_migrations: true

output_schema:
  findings:
    - id: string
      severity: enum(HIGH|MEDIUM|LOW)
      file: string
      symbol: string?
      evidence: string
      fix: string
      autofix: boolean
  summary:
    high: int
    medium: int
    low: int
  decision: enum(READY|NEEDS_REVISION|BLOCKED)

activation_hint:
  - "Evaluate rules in order A1→A11; mark PASS or FAIL→reason per rule."
  - decision:
      BLOCKED: "if any HIGH fails."
      NEEDS_REVISION: "if no HIGH fails but any MEDIUM fails."
      READY: "if all PASS."